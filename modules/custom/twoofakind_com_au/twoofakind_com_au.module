<?php

/**
 * @file
 * Custom site mods for two of a kind
 */

/**
 * Required includes
 */

module_load_include('inc', 'twoofakind_com_au', 'includes/match.entity');
module_load_include('inc', 'twoofakind_com_au', 'includes/wink.entity');
module_load_include('inc', 'twoofakind_com_au', 'includes/recent_view.entity');
module_load_include('inc', 'twoofakind_com_au', 'includes/favourite.entity');

/******************************************************************************
 * Menu functions
 ******************************************************************************/

/**
 * Implements hook_menu().
 */
function twoofakind_com_au_menu() {
  
  $items = array();

  // favourites
  _favourite_menu($items);
  
  // winks
  _wink_menu($items);

  return $items;
}

/******************************************************************************
 * Init functions
 ******************************************************************************/

/**
 * Implements hook_init().
 */
function twoofakind_com_au_init() {
  drupal_add_js(drupal_get_path('module', 'twoofakind_com_au') . '/js/twoofakind_com_au.js', 'file');
}

/******************************************************************************
 * Block functions
 ******************************************************************************/

/**
 * Implements hook_block_view_alter().
 */
function twoofakind_com_au_block_view_alter(&$data, $block) {
  
  // modify view blocks that have a subject
  if ($block->module == 'views' && !empty($data['subject'])) {

    // add any count information to the subject
    // and make the subject a link to the page
    
    if ($block->delta == 'matches-block_my_matches') {
      
      // my matches
      
      $count = match_count_matcher_unviewed_matches();
      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'match_me-block_match_me') {
      
      // match me
      
      $count = match_count_matchee_unviewed_matches();
      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'winks-block') {
      
      // winked at

      // don't need count for this one
      // however, this is how it would be done
//      $count = wink_count_winker_unviewed_winks();
//      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'winks_received-block') {
      
      // winks received
      
      $count = wink_count_winkee_unviewed_winks();
      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'favourites-block') {
      
      // favourites
      
      // don't need count for this one
      // however, this is how it would be done
//      $count = favourite_count_favouriteer_unviewed_favourites();
//      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'favourites_received-block') {
      
      // favourites received
      
      $count = favourite_count_favouriteee_unviewed_favourites();
      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'recent_views-block') {
      
      // recently viewed
      
      // don't need count for this one
      // however, this is how it would be done
//      $count = recent_view_count_recent_viewer_unviewed_recent_views();
//      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
    elseif ($block->delta == 'recent_views_received-block') {
      
      // recently viewed received

      $count = recent_view_count_recent_viewee_unviewed_recent_views();
      $data['subject'] .= " ($count)";
      _twoofakind_com_au_subject_more($data);
    }
  }
  
}

/**
 * Implementation of hook_block_info()
 */
function twoofakind_com_au_block_info() {
  $blocks = array();
  
  // recent messages block
  $blocks['twoofakind_privatemsg_messages'] = array(
    'info' => t('Two of a kind : PrivateMsg : Recent messages'),
  );
  
  // profile block
  $blocks['twoofakind_profile'] = array(
    'info' => t('Two of a kind : Profile block'),
  );
  
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 * 
 * note: http://drupal.org/project/efq_views
 * wasn't stable enough to be used (04/2011)
 */
function twoofakind_com_au_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    
    case 'twoofakind_privatemsg_messages':
      $block = _twoofakind_com_au_block_recent_messages();
      break;
    
    case 'twoofakind_profile':
      $block = _twoofakind_com_au_block_profile();
      break;
  }
  return $block;
}

/**
 * Render the recent messages block
 * 
 * Grabs up to 5 most recent messages and adds the unread count to the block subject
 * 
 * this was inspired by http://drupal.org/node/624528 but that example is not functional
 * (at least not in D7).
 * 
 * @todo
 * It would be nicer if we could get the username to be used instead of the email
 * subject for consistency with other blocks. May be too much overhead at this time so 
 * will wait until it is requested by client. Would also be difficult to get the sex.
 * The only way might be to expose the messages to views and do the blocks in a similar way
 * TOO MUCH EFFORT FOR THE TIME BEING
 * 
 * @return
 *   A completed block array with subject and content
 */
function _twoofakind_com_au_block_recent_messages() {
  global $user;

  // Generate the query to load the messages.
  $query = _privatemsg_assemble_query('list', $user);
  
  // Replace 'inbox' with 'sent' to display sent messages or 'list' to display all messages.
  // $query = _privatemsg_assemble_query('list', $user, 'inbox');
  // @todo - inbox/sent gets ignored. Cannot get inbox or sent get via the gui either. 
  //         is it how D7 version works?

  // Load 5 messages/threads. Replace 5 if you want to display a different amount of messages.
  $result = $query->limit(5)->execute();
 
  $list = array();
  foreach ($result as $thread) {
    // Generate a link with the subject as title that points to the view message page.
    // limit the subject to a certain number of characters
    $alter = array(
      'max_length' => 150,
      'word_boundary' => TRUE,
      'ellipsis' => '...',
      'html' => FALSE
    );
    $thread_subject = views_trim_text($alter, $thread->subject);
    // work out if the message has been read or not
    $options = array(
      'attributes' => array(
        'title' => $thread->subject
      )
    );
    if ($thread->is_new) {
      $options['attributes']['class'] = 'unread';
    }
    $list[] = l($thread_subject, 'messages/view/' . $thread->thread_id, $options);
  }
  
  // grab count of unread messages
  $count = privatemsg_unread_count();
  
  // put the block together
  // set up title as link
  $subject = t('Messages') . " ($count)";
  $options = array(
    'attributes' => array(
      'title' => $subject
    )
  );
  $block = array(
    'subject' => l($subject, 'messages', $options)
  );
  // add the list to the content
  $block['content'] = theme('item_list', array(
      'items' => $list,
      'type' => 'ul',
      'attributes' => array(
        'class' => 'menu'
      )
    )
  );
  // and a more link to the content
  $block['content'] .= '<div class="more-link">';
  $options = array(
    'attributes' => array(
      'title' => 'VIew more messages'
    )
  );
  $block['content'] .= l(t('more'), 'messages', $options);
  $block['content'] .= '</div>';
  return $block;

}

/**
 * Render the profile block
 * 
 * Simple block that will output picture and links
 * 
 * @return
 *   A completed block array with subject and content
 */
function _twoofakind_com_au_block_profile() {
  
  global $user;
  
  $block = array();
  
  // empty subject
  $block['subject'] = '<none>';
  
  // initialise content
  $content = array();
  
  // grab the picture of the user
  $content[] = theme('user_picture', array('account' => $user));
  
  // grab the user profile menu
  $menu_minified = array();
  $options = array(
    'attributes' => array(
      'title' => ''
    )
  );
  $menu_items = menu_tree('menu-user-profile-block');
  foreach ($menu_items as $menu_item) {
    
    // only process actual menu items
    if (is_array($menu_item) && !array_key_exists('#title', $menu_item)) {
      continue;
    }
    
    if (isset($menu_item['#localized_options']['attributes']['title'])) {
      $options['attributes']['title'] = $menu_item['#localized_options']['attributes']['title'];
    } else {
      $options['attributes']['title'] = $menu_item['#title'];
    }
    $menu_minified[] = l($menu_item['#title'], $menu_item['#href'], $options);
  }
  
  // add the menu to the content
  $content[] = theme('item_list', array(
      'items' => $menu_minified,
      'type' => 'ul',
    )
  );
  
  // finalise the content
  $block['content'] = implode("\n", $content);
  
  return $block;
  
}

/******************************************************************************
 * Form functions
 ******************************************************************************/

/**
 * Implementation of hook_form_alter()
 */
function twoofakind_com_au_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    
    case 'views_exposed_form':
      _twoofakind_com_au_form_views_exposed_form($form, $form_state);
      break;
    
    case 'user_profile_form':
      _twoofakind_com_au_form_user_profile_form($form, $form_state);
      break;
  }
}

/**
 * Alter the views exposed form
 * 
 * Adding users match criteria to the form
 * if no criteria has been entered manually
 * 
 * @param
 *   A form
 * 
 * @param
 *   And it's for  state
 */
function _twoofakind_com_au_form_views_exposed_form(&$form, &$form_state) {
  
  global $user;
  
  // wrap the whole form in a div
  $form['#prefix'] = '<div id="matches_form">';
  $form['#suffix'] = '</div>';

  // check if we're clearing
  if (isset($_GET['op']) && $_GET['op'] == 'Clear') {
    // we are, don't populate from match criteria
    // and add a value to the session to indicate this
    $_SESSION['FormClear'] = TRUE;
    return;
  }

  // check the session for clear value
  // I'm going to retain the clear value for the remainder of the session
  // otherwise with each load match criteria will be reinstated
  if (isset($_SESSION['FormClear'])) {
    return;
  }

  // grab the match criteria of the currently logged in user
  // if any exist
  $user_complete = (array) user_load($user->uid);
  foreach ($user_complete as $key => $data) {

    // we only want fields data
    // and only those that pertain to matches
    if (strpos($key, 'field_match') === false) {
      continue;
    }

    // create the field key for the match
    // special treatment for location
    if ($key == 'field_match_user_location') {
      $search_key = 'city';
    } else {
      $search_key = str_replace('field_match', 'field', $key) . '_value';
    }

    // now, if the search key value is empty (in the form state)
    // populate it with the value from the users match criteria
    if (array_key_exists($search_key, $form)) {

      // check to see if there is a value in form_state
      if (!array_key_exists($search_key, $form_state['input']) || empty($form_state['input'][$search_key])) {

        // form_state value for this field is empty
        // look for a corresponding value in match criteria
        if (!empty($data[LANGUAGE_NONE])) {

          // we have match criteria
          // process the data from the user array format
          // to that which form state uses
          $data_formatted = array();
          $data_is_text = FALSE;
          foreach ($data[LANGUAGE_NONE] as $value) {
            $data_formatted[] = $value['value'];
            if (array_key_exists('format', $value) || array_key_exists('safe_value', $value)) {
              $data_is_text = TRUE;
            }
          }

          // now plug the values in to the form_state
          if ($data_is_text) {

            // treat text data differently to the others
            $form_state['input'][$search_key] = $data_formatted[0];
            $form_state['view']->exposed_input[$search_key] = $data_formatted[0];
            $form[$search_key]['#default_value'] = $data_formatted[0];
            $form[$search_key]['#value'] = $data_formatted[0];

          } else {
            $form_state['input'][$search_key] = $data_formatted;
            $form_state['view']->exposed_input[$search_key] = $data_formatted;
            $form[$search_key]['#default_value'] = $data_formatted;
            $form[$search_key]['#value'] = $data_formatted;
          } 
        } 
      }
    }
  }
}

/**
 * Alter the user profile form
 * 
 * Adding some headings and text to user profile form
 * and collapsing (by default) the pvt messages fieldset
 * 
 * @param
 *   A form
 * 
 * @param
 *   And it's for  state
 */
function _twoofakind_com_au_form_user_profile_form(&$form, &$form_state) {
  
  // add some headings and text
  // profile
  $markup = array();
  $markup[] = '<h2>Profile information<a name="profile">&nbsp;</a></h2>';
  $markup[] = '<p>Please enter your profile information.</p>';
  $form['profile_help'] = array(
    '#markup' => implode("\n", $markup),
    '#weight' => -1000
  );
  // match criteria
  $markup = array();
  $markup[] = '<h2>Match criteria<a name="match">&nbsp;</a></h2>';
  $markup[] = '<p>Please enter your match criteria.</p>';
  $form['match_help'] = array(
    '#markup' => implode("\n", $markup),
    '#weight' => 1
  );
  
  // collapse the pvt messages fieldset
  $form['privatemsg']['#collapsed'] = TRUE;
  
}

/******************************************************************************
 * View functions
 ******************************************************************************/

/**
 * Implements hook_views_api().
 */
function twoofakind_com_au_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'twoofakind_com_au') . '/views',
  );
}

/******************************************************************************
 * Entity functions
 ******************************************************************************/

/**
 * Implement hook_entity_info().
 */
function twoofakind_com_au_entity_info() {
  $return = array();
  $return['match'] = array(
    'label' => t('Match'),
    'controller class' => 'MatchController',
    'base table' => 'matches',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'mid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'static cache' => TRUE
  );
  $return['wink'] = array(
    'label' => t('Wink'),
    'controller class' => 'WinkController',
    'base table' => 'winks',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'wid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'wink_uri',
    'static cache' => TRUE
  );
  $return['recent_view'] = array(
    'label' => t('Recent View'),
    'controller class' => 'RecentViewController',
    'base table' => 'recent_views',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'vid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'recent_view_uri',
    'static cache' => TRUE
  );
  $return['favourite'] = array(
    'label' => t('Favourite'),
    'controller class' => 'EntityAPIController',
    'base table' => 'favourites',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'fid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'favourite_uri',
    'static cache' => TRUE
  );
  return $return;
}

/******************************************************************************
 * User functions
 ******************************************************************************/

/**
 * Implements hook_user_view().
 */
function twoofakind_com_au_user_view($account, $view_mode, $langcode) {

  // Add a recent view record
  if ($view_mode == 'full') {
    recent_view_create($account->uid);
  }
  
}

/******************************************************************************
 * Display Suite functions
 ******************************************************************************/

/**
 * Implements hook_ds_fields_info
 *
 * @param $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return $fields
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function twoofakind_com_au_ds_fields_info($entity_type) {

  $fields = array();

  // user fields
  if ($entity_type == 'user') {
    
    // favourites
    $fields['favourite'] = array(
      'title' => t('Favourite'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|full', 'user|user_list', 'user|user_list_block'),
      'file' => drupal_get_path('module', 'twoofakind_com_au') . '/includes/favourite.entity.inc',
      'function' => 'theme_ds_favourite_field',
      'properties' => array(
        'favourite_path' => TWOOFAKIND_PATH_FAVOURITE . '/nojs',
        'unfavourite_path' => TWOOFAKIND_PATH_UNFAVOURITE . '/nojs',
        'entity_id_key' => 'uid',
        'entity_render_key' => 'name',
      )
    );
    
    // winks
    $fields['wink'] = array(
      'title' => t('Wink'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|full', 'user|user_list', 'user|user_list_block'),
      'file' => drupal_get_path('module', 'twoofakind_com_au') . '/includes/wink.entity.inc',
      'function' => 'theme_ds_wink_field',
      'properties' => array(
        'wink_path' => TWOOFAKIND_PATH_FAVOURITE . '/nojs',
        'entity_id_key' => 'uid',
        'entity_render_key' => 'name',
      )
    );
    
    // age
    $fields['age'] = array(
      'title' => t('Age'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|full', 'user|user_list', 'user|user_list_block'),
      'function' => 'theme_ds_age_field'
    );
  }

  return array($entity_type => $fields);

}

/**
 * Theme field for age DS field
 *
 * @param $field
 *   The field to be output
 *
 * @return 
 *   The rendered field
 *
 * @see hook_ds_fields_info()
 */
function theme_ds_age_field($field) {
  
  // initialise output
  $output = '';
  
  // look for DOB field
  if (isset($field['entity']->field_dob[LANGUAGE_NONE][0]['value'])) {
    
    $dob = strtotime($field['entity']->field_dob[LANGUAGE_NONE][0]['value']);
    $now = time();
    $output = sprintf("%d", floor(abs($now-$dob)/60/60/24/365));
    
  }

  return $output;
  
}

/******************************************************************************
 * Utility functions
 ******************************************************************************/

/**
 * 
 */
function _twoofakind_com_au_subject_more(&$data) {
  
  // grab view information
  $view_path = false;
  if (isset($data['content']['#views_contextual_links_info']['views_ui']['view_name'])) {

    // grab the view name and display
    $view_name = $data['content']['#views_contextual_links_info']['views_ui']['view_name'];
    $view = views_get_view($view_name);

    // from the view grab the page path
    if ($view) {
      foreach ($view->display as $display) {
        if ($display->display_plugin != 'page' || !array_key_exists('path', $display->display_options)) {
          continue;
        }
        $view_path = $display->display_options['path'];
        break;
      }
    }
  }
  
  // did we find a view path
  if ($view_path) {
    $options = array(
      'attributes' => array(
        'title' => $data['subject']
      )
    );
    $data['subject'] = l($data['subject'], $view_path, $options);
  }
}

/**
 * Simple ajax link wrapper
 */
function _twoofakind_com_au_user_ajax_link($user, $path, $title) {

  // path
  $path = $path . '/nojs/' . $user->uid;

  // options
  $options = array(
    'attributes' => array(
      'title' => sprintf($title, $user->name),
      'class' => array('use-ajax')
    )
  );

  // create link
  return l(sprintf($title, ''), $path, $options);
  
}

/**
 * Simple ajax response wrapper
 */
function _twoofakind_com_au_user_ajax_response($user, $entity_type, $message, $link = '') {

  // wrap message in span
  $message = "<span class=\"ajax-message\">$message</span>";

  // wrap it all in a div
  $output = "<div id=\"$entity_type-{$user->uid}\">$link $message</div>";

  // send it back
  $commands = array();
  $commands[] = ajax_command_replace("#$entity_type-{$user->uid}", $output);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
  
}

/**
 * Simple ajax response wrapper
 */
function _twoofakind_com_au_user_nojs_response($message, $redirect) {
 
  // set message and redirect
  drupal_set_message($message, 'error');
  drupal_goto($redirect);
  
}