<?php

/**
 * @file
 * Custom site mods for two of a kind
 */

module_load_include('inc', 'twoofakind_com_au', 'includes/match.entity');

/**
 * Implementation of hook_block_info()
 */
function twoofakind_com_au_block_info() {
  $blocks['tok-last-msg'] = array(
    'info' => t('Two of a kind: Last messages'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 * 
 * note: http://drupal.org/project/efq_views
 * wasn't stable enough to be used (04/2011)
 */
function twoofakind_com_au_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'tok-last-msg':
      $block['content'] = tok_last_5_msgs(); //wink_last_winks(FALSE);
      break;
  }
  return $block;
}

/**
 * generates a block "Messages (N)" with the last 5 messages received by the current user
 * N is the number of new messages
 *
 * this was inspired by http://drupal.org/node/624528 but that example is not functional
 * (at least not in D7).
 * 
 */
function tok_last_5_msgs() {
  global $user;

  // Generate the query to load the messages.
  $query = _privatemsg_assemble_query('list', $user);
  
  // Replace 'inbox' with 'sent' to display sent messages or 'list' to display all messages.
  // $query = _privatemsg_assemble_query('list', $user, 'inbox');
  // @todo - inbox/sent gets ignored. Cannot get inbox or sent get via the gui either. 
  //         is it how D7 version works?

  // Load 5 messages/threads. Replace 5 if you want to display a different amount of messages.
  $result = $query->limit(5)->execute();
 
  $list = array();
  foreach ($result as $thread) {
    // Generate a link with the subject as title that points to the view message page.
    $list[] = l($thread->subject, 'messages/view/' . $thread->thread_id);
  }
  
  // Display list as a themed item_list.
  $nmcount = privatemsg_unread_count();
  return theme('item_list', array(
      'items' => $list,
      'title' => l(t('Messages') . " ($nmcount)", 'messages'),
      'type' => 'ul',
    )
  );

}

/**
 * Implementation of hook_form_alter()
 */
function twoofakind_com_au_form_alter(&$form, &$form_state, $form_id) {
  
  global $user;
  
  if ($form_id == 'views_exposed_form') {

    // wrap the whole form in a div
    $form['#prefix'] = '<div id="matches_form">';
    $form['#suffix'] = '</div>';

    // check if we're clearing
    if (isset($_GET['op']) && $_GET['op'] == 'Clear') {
      // we are, don't populate from match criteria
      // and add a value to the session to indicate this
      $_SESSION['FormClear'] = TRUE;
      return;
    }
    
    // check the session for clear value
    // I'm going to retain the clear value for the remainder of the session
    // otherwise with each load match criteria will be reinstated
    if (isset($_SESSION['FormClear'])) {
      return;
    }

    // grab the match criteria of the currently logged in user
    // if any exist
    $user_complete = (array) user_load($user->uid);
    foreach ($user_complete as $key => $data) {
      
      // we only want fields data
      // and only those that pertain to matches
      if (strpos($key, 'field_match') === false) {
        continue;
      }

      // create the field key for the match
      // special treatment for location
      if ($key == 'field_match_user_location') {
        $search_key = 'city';
      } else {
        $search_key = str_replace('field_match', 'field', $key) . '_value';
      }

      // now, if the search key value is empty (in the form state)
      // populate it with the value from the users match criteria
      if (array_key_exists($search_key, $form)) {

        // check to see if there is a value in form_state
        if (!array_key_exists($search_key, $form_state['input']) || empty($form_state['input'][$search_key])) {

          // form_state value for this field is empty
          // look for a corresponding value in match criteria
          if (!empty($data[LANGUAGE_NONE])) {
            
            // we have match criteria
            // process the data from the user array format
            // to that which form state uses
            $data_formatted = array();
            $data_is_text = FALSE;
            foreach ($data[LANGUAGE_NONE] as $value) {
              $data_formatted[] = $value['value'];
              if (array_key_exists('format', $value) || array_key_exists('safe_value', $value)) {
                $data_is_text = TRUE;
              }
            }

            // now plug the values in to the form_state
            if ($data_is_text) {
              
              // treat text data differently to the others
              $form_state['input'][$search_key] = $data_formatted[0];
              $form_state['view']->exposed_input[$search_key] = $data_formatted[0];
              $form[$search_key]['#default_value'] = $data_formatted[0];
              $form[$search_key]['#value'] = $data_formatted[0];
              
            } else {
              $form_state['input'][$search_key] = $data_formatted;
              $form_state['view']->exposed_input[$search_key] = $data_formatted;
              $form[$search_key]['#default_value'] = $data_formatted;
              $form[$search_key]['#value'] = $data_formatted;
            } 
          } 
        }
      }
    }
  }
}

/******************************************************************************
 * View functions
 ******************************************************************************/

/**
 * Implements hook_views_api().
 */
function twoofakind_com_au_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'twoofakind_com_au') . '/views',
  );
}

/******************************************************************************
 * Entity functions
 ******************************************************************************/

/**
 * Implement hook_entity_info().
 */
function twoofakind_com_au_entity_info() {
  $return = array();
  $return['match'] = array(
    'label' => t('Match'),
    'controller class' => 'MatchController',
    'base table' => 'matches',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'mid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'static cache' => TRUE,
//    'bundles' => array(),
//    'bundle keys' => array(
//      'bundle' => 'name',
//    ),
  );
  return $return;
}