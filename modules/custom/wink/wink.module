<?php

/**
 * @file
 * moduel with wink entity.
 */

/*
 * implementation of hook_menu
 */
function wink_menu() {
    $items['wink/at/%'] = array(
      'title' => 'wink at name',
      'page callback' => 'wink_at_name',
      'page arguments' => array(2, 3),
      'access callback' => 'wink_access_for_logged_in',
// If we didn't specify the 
//    'access callback'
// and used the default one, we would need some 'access arguments', e.g.:
//    'access arguments' => array('access content'), 
// to avoid the "access denied" message
      'type' => MENU_CALLBACK,
    );
    
  $items['wink/received/%'] = array(
    'title' => t('Received winks'),
    'page callback' => 'winks_received_by_name',
    'page arguments' => array(2),
    'access callback' => 'wink_access_for_logged_in',
    'type' => MENU_NORMAL_ITEM,
  );
  // in case user is not specified, it will be the current user:
  $items['wink/received'] = array(
    'title' => t('Wink received by me'),
    'page callback' => 'winks_received_by_name',
    'page arguments' => array(),
    'access callback' => 'wink_access_for_logged_in',
    'type' => MENU_NORMAL_ITEM,
  );


  $items['wink/made/%'] = array(
    'title' => t('Made winks'),
    'page callback' => 'winks_made_by_name',
    'page arguments' => array(2),
    'access callback' => 'wink_access_for_logged_in',
    'type' => MENU_NORMAL_ITEM,
  );
  // in case user is not specified, it will be the current user:
  $items['wink/made'] = array(
    'title' => t('Winks made by me'),
    'page callback' => 'winks_made_by_name',
    'page arguments' => array(),
    'access callback' => 'wink_access_for_logged_in',
    'type' => MENU_NORMAL_ITEM,
  );

    
    return $items;
}

function winks_made_by_name($name = NULL) {
  return winks_received_by_name($name, FALSE);
}

function winks_received_by_name($name = NULL, $they_at_me = TRUE) {
  global $user;
  
  $uid = $user->uid;
  if ($name != NULL) {
    $urs = user_load_by_name($name);
    if (!$usr) {
      drupal_set_message("User could not be found: $name", 'error');
      return "";
    } else {
      $uid = $usr->uid;
    }
  }

  $query = new EntityFieldQuery();


  if ($they_at_me) {
    $query
      ->entityCondition('entity_type', 'wink', '=')
      ->propertyCondition('user_to_id', $uid, '=')
      ->propertyOrderBy('wid', 'DESC')
      ->pager(10, 0);;
  // ->propertyCondition('created', '1294694496', '<');
  }
  else {
    $query
      ->entityCondition('entity_type', 'wink', '=')
      ->propertyCondition('user_from_id', $uid, '=')
      ->propertyOrderBy('wid', 'DESC')
      ->pager(10, 0);;
  // ->propertyCondition('created', '1294694496', '<');
  }
  $result = $query->execute();
  // dsm($result);
  
  $entity_type = 'wink';
  
  if (!empty($result[$entity_type])) {
    $entities = entity_load($entity_type, array_keys($result[$entity_type]));
    // dsm($entities);

    // return theme('table', $entities);
    if ($they_at_me) {
      return theme('mytablereceived', $entities, $they_at_me) .  theme('pager'); 
    }
    else {
      return theme('mytablemade', $entities, $they_at_me) .  theme('pager'); 
    }

  }
    
  return "";
}	  

/**
* Implements hook_theme().
* http://drupal.org/node/933976
* We need to register the theme functions we want to use
*/
function wink_theme() {
  return array(
    'mytablereceived' => array(
      'render element' => 'element',
    ),
    'mytablemade' => array(
      'render element' => 'element',
    ),
  );
}

function theme_mytablereceived( $entities = array() ) {

  
  $out = '<div><table>';
  foreach ($entities as $record) {
/**
 *  @todo there is an strange emtpy array as the last member
 * 
    print_r($record);  echo "<br />";
    echo ( empty($record) ? "EMPTY" : "NOT");
    echo "<br />";
  */ 
    if ( empty($record)) continue;
    
    $x = $record->user_from_id;
    
    if ($account = user_load($record->user_from_id)) {
	  $out .= '<tr><td>'; 
	  //$variables['items'][] = l($account->name, "user/" . $record->id);
      $out .= l($account->name, "user/" . $account->uid);
      $out .= '</td><td>';
      $difference = time() - strtotime($record->date_of_wink);
      $out .= format_interval($difference, 2) . " ago";
      // $out .= date("d/m/Y, h:i:s a", strtotime($record->date_of_wink));
      $out .= '</td></tr>';
    }
  }

  $out .= '</table></div><br />';

  // dsm($entities);   
  return $out;
  
}

// @todo: this is a dirty copy of the above theme_mytablereceived,
// just to have something (tuesda eve)
function theme_mytablemade( $entities = array() ) {

  
  $out = '<div><table>';
  foreach ($entities as $record) {
    if ( empty($record)) continue;
    
    if ($account = user_load($record->user_to_id)) {
	  $out .= '<tr><td>'; 
	  //$variables['items'][] = l($account->name, "user/" . $record->id);
      $out .= l($account->name, "user/" . $record->user_to_id);
      $out .= '</td><td>'; 
      $out .= $record->date_of_wink;
      $out .= '</td></tr>';
    }
  }

  $out .= '</table></div><br />';

  // dsm($entities);   
  return $out;
  
}

/*
 * Function to handle winking at someone
 */
function wink_at_name($name, $requri = NULL) {
  global $user;
  
  $to = user_load_by_name($name);
  if (!$to) {
    drupal_set_message("User could not be found: $name", 'error');
  }

  $wink = array (
    'user_from_id' => $user->uid,
    'user_to_id' => $to->uid,
  );
  entity_get_controller('wink')->save($wink);
  // note: Notice: Undefined index: type in drupal_write_record() 
  // caused by https://drupal.org/node/998632

  drupal_set_message(t("You have winked at") . " $name.");

  if ($requri) {
    drupal_goto(urldecode($requri));
  }
}

/*
 * Function returns true if user is logged.
 */
function wink_access_for_logged_in() {
	return user_is_logged_in();
}

/**
 * Implement hook_entity_info().
 */
function wink_entity_info() {
  $return = array(
    'wink' => array(
      'label' => t('Wink Entity'),
      'controller class' => 'WinkItController',
      'base table' => 'wink',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'wid',
      ),
      'static cache' => TRUE, // our winks live
//      'bundles' => array(),
//      'bundle keys' => array(
//        'bundle' => 'name',
//      ),
    ),
  );
  return $return;
}

/**
 * Another option:
 * Sending wink via a hidden form
 */

function wink_add_my_form($from, $to) {
  $wink = array (
    'user_from_id' => $from,
    'user_to_id' => $to,
  );

  return drupal_get_form('wink_add_form', $wink);
}

/**
 * Create a hidden send-wink-form
 *   The receiver is read from the $wink object
 */
function wink_add_form($form, &$form_state, $wink) {
  

  $form['user_to_id'] = array(
    '#type' => 'hidden',
    '#title' => t('wink reciever'),
    '#required' => TRUE,
    '#value' => $wink['user_to_id'],
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send a wink'),
  );


  return $form;
}

/**
 * Wink handler - when sent via a form (as oposed to link)
 */

function wink_add_form_submit($form, &$form_state) {
  global $user;
  // $from=$form_state['values']['user_from_id'];
  $from = $user->uid;
  $to = $form_state['values']['user_to_id'];
  if ($account = user_load($to)) {
    drupal_set_message(t("You have winked at") . " " . $account->name . ".");   
    $wink = array (
    'user_from_id' => $from,
    'user_to_id' => $to,
    );
    entity_get_controller('wink')->save($wink);
  }
}

/**
 * Implementation of hook_block_info()
 */
function wink_block_info() {
  $blocks['wink-they-at-me'] = array(
    'info' => t('Who winks at me'),
  );
  $blocks['wink-me-at-them'] = array(
    'info' => t('Who I wink at'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 * 
 * note: http://drupal.org/project/efq_views
 * wasn't stable enough to be used (04/2011)
 */
function wink_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'wink-they-at-me':
      wink_last_winks($block, TRUE);
      break;
    case 'wink-me-at-them':
      wink_last_winks($block, FALSE);
      break;
  }
  return $block;
}

/**
 * returns the number of winks received since last login
 * of current user
 */
function winks_cnt_from_last_login() {
  global $user;

  if (empty($user) || $user->uid < 1) return "";
  
  
  $query = new EntityFieldQuery();
  
  $query
    ->entityCondition('entity_type', 'wink', '=')
    ->propertyCondition('user_to_id', $user->uid, '=')
    ->propertyCondition('date_of_wink', $user->login, '>')
    ->count();
 
  $rv = $query->execute();
  
  return " ($rv)";
}

/**
 * function outputs last $max_rows rows of users 
 * based on the "they_at_me" parameter
 *  - if it is not FALSE, these are users who have winked at me
 *  - if it is FALSE,     these are users I have winked at
 * @return string
 * 
 * @todo - use entities - unify with the page functions
 */
function wink_last_winks(&$block, $they_at_me = FALSE) {
  global $user;
  $max_rows = 5; // how many winks to output

  if ($they_at_me) {
    
    $more_link = 'wink/received';
    // removing the link for the time being
    // as we might make these titles and blocks interactive
    //$title = l(t('Who winked at me') . winks_cnt_from_last_login(), $more_link);
    $title = t('Who winked at me') . winks_cnt_from_last_login();
    $winks = db_query('SELECT user_from_id AS id from {wink} WHERE user_to_id = :uid ORDER BY wid DESC LIMIT ' . $max_rows, array(':uid' => $user->uid));
    
  } else { // me_at_them
    
    $more_link = 'wink/made';
    // similarly
    //$title = l(t('Who I\'ve winked at'), $more_link);
    $title = t('Who I\'ve winked at');
    $winks = db_query('SELECT user_to_id AS id from {wink} WHERE user_from_id = :uid ORDER BY wid DESC LIMIT ' . $max_rows, array(':uid' => $user->uid));
    
  }

  $items = array();
  // process wink items and extract user names and link
  foreach ($winks as $record) {
    if ($account = user_load($record->id)) {
      $items[] = array(
        'data' => l($account->name, "user/" . $record->id),
      );
    }
    

  }
  $out = array();
  $out[] = '<div class="item-list">';
  $out[] = theme('item_list', array(
      'items' => $items,
      'type' => 'ul',
      'attributes' => array(
        'class' => 'menu'
      ),
    )
  );
  $out[] = '</div>';
  
  $out[] = '<div class="more-link">';
  $out[] = l('More', $more_link);
  $out[] = '</div>';
  
  $block['subject'] = $title;
  $block['content'] = implode("\n", $out);
}

/**
* Implements hook_user_view().
*/
function wink_user_view($account, $view_mode, $langcode) {

  global $user;
  
  $account->content['summary']['winklink'] =  array(
       '#type' => 'user_profile_item', 
    // '#title' => t('Wink'), 
       '#markup' => l(t('Wink at user') . " " . $account->name, "wink/at/" . $account->name . "/" . urlencode(request_uri())),
  );

  // display a submit button instead:      
  $account->content['summary']['testwink'] =  wink_add_my_form($user->uid, $account->uid, $account->name);

}

/**
 * Implements hook_views_api().
 */
function wink_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'wink') . '/views',
  );
}