<?php

/**
 * @file
 * moduel with wink entity.
 */

/*
 * implementation of hook_menu
 */
function wink_menu() {
    $items['wink/at/%'] = array(
      'page callback' => 'wink_at_name',
      'page arguments' => array(1),
    );
    return $items;
}

/*
 * Function to handle winking at someone
 */
function wink_at_name($name) {
  global $user;
  
  $to = user_load_by_name($name);
  if (!$to) {
    drupal_set_message("User could not be found: $name", 'error');
  }

  $wink = array (
    'user_from_id' => $user->uid,
    'user_to_id' => $to->uid,
  );
  entity_get_controller('wink')->save($wink);
  drupal_set_message("storing a wink from uid: {$user->name}  -> $name");
}



/**
 * Implement hook_entity_info().
 */
function wink_entity_info() {
  $return = array(
    'wink' => array(
      'label' => t('Wink Entity'),
      'controller class' => 'WinkItController',
      'base table' => 'wink',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'wid',
      ),
//      'static cache' => TRUE,
//      'bundles' => array(),
//      'bundle keys' => array(
//        'bundle' => 'name',
//      ),
    ),
  );
  return $return;
}




function wink_add_my_form($from, $to) {
  $wink = array (
    'user_from_id' => $from,
    'user_to_id' => $to,
  );
  
  return drupal_get_form('wink_add_form', $wink);
}


/**
 * Create a hidden send-wink-form - the sender and receiver 
 *   are stored in the $wink object
 */
function wink_add_form($form, &$form_state, $wink) {
  
  $form['user_from_id'] = array(
    '#type' => 'hidden',
    '#title' => t('wink sender'),
    '#required' => TRUE,
    '#value' => $wink['user_from_id'],
  );

  $form['user_to_id'] = array(
    '#type' => 'hidden',
    '#title' => t('wink reciever'),
    '#required' => TRUE,
    '#value' => $wink['user_to_id'],
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send a wink'),
  );
  
 
  return $form;
}


function wink_add_form_submit($form, &$form_state) {
  $from=$form_state['values']['user_from_id'];
  $to  =$form_state['values']['user_to_id'];
  drupal_set_message("storing a wink from uid: $from  -> $to");

 $wink = array (
    'user_from_id' => $from,
    'user_to_id' => $to,
  );
  entity_get_controller('wink')->save($wink);

}






/**
 * Implementation of hook_block_info()
 */
function wink_block_info() {
  $blocks['wink-they-at-me'] = array(
    'info' => t('Who winks at me'),
  );
  $blocks['wink-me-at-them'] = array(
    'info' => t('Who I wink at'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 * 
 * note: http://drupal.org/project/efq_views
 * wasn't stable enough to be used (04/2011)
 */
function wink_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'wink-they-at-me':
      $block['subject'] = t('Who has winked at me');
      $block['content'] = wink_last_winks(TRUE);
      break;
    case 'wink-me-at-them':
      $block['subject'] = t('Who I\'ve winked at');
      $block['content'] = wink_last_winks(FALSE);
      break;
  }
  return $block;
}


/**
 * function outputs last $max_rows rows of users 
 * based on the "they_at_me" parameter
 *  - if it is not FALSE, these are users who have winked at me
 *  - if it is FALSE,     these are users I have winked at
 * @return string
 */
function wink_last_winks($they_at_me = FALSE) {
  global $user;
  $max_rows = 5; // how many winks to output
  
  $list_variables = array(
    'items' => array(),
    'type' => 'ul'
  );

  $out = '<div>';
  if ($they_at_me) {
    $winks = db_query('SELECT user_from_id AS id from {wink} WHERE user_to_id = :uid ORDER BY wid DESC LIMIT ' . $max_rows, array(':uid' => $user->uid));
  } else { // me_at_them
    $winks = db_query('SELECT user_to_id AS id from {wink} WHERE user_from_id = :uid ORDER BY wid DESC LIMIT ' . $max_rows, array(':uid' => $user->uid));
  }
  foreach ($winks as $record) {
    if ($account = user_load($record->id)) {
      $out .= '<div>' . l($account->name, "user/" . $record->id) . '</div>';
    }
  }
  $out .= '</div>';
  return $out;
  
  // To do this the Drupal way you will need to create a
  // EntityFieldQuery to obtain a list of entity id's
  // you can then pass this in to the entity_load function
  // $ids = EntityFieldQuery....
  // entity_load('wink', $ids);
  
  // This would be the entity (non-SQL) way:
  // (the sort and limit to max_rows parts are missing in code below)
  // 
  // $condition = array('user_to_id' => $user->uid);
  // $winks = entity_load('wink', array(), $condition); 
  // foreach ($winks as $record) {
  //   echo $record->user_from_id;
  // }

}





/**
* Implements hook_user_view().
*/
function wink_user_view($account, $view_mode, $langcode) {

  global $user;
  
  // this properly generates a link 
  // but not sure how to trigger my store function after a click
  //
  // $account->content['summary']['winklink'] =  array(
  //     '#type' => 'user_profile_item', 
  //     '#title' => t('Wink'), 
  //     '#markup' => l(t('Wink at user') . " " . $account->name, "user/$account->uid"),
  // );

  // display a submit button instead:      
  $account->content['summary']['testwink'] =  wink_add_my_form($user->uid, $account->uid);

  // dsm($account->content); 
}
